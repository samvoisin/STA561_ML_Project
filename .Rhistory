motif1 <- "gesture_\\d{1}"
motif2 <- "\\d{1}"
gsttxt <- stringr::str_extract(fn, motif1)
gstnum <- as.integer(stringr::str_extract(gsttxt, motif2))
return(gstnum)
}
datafiles <- c()
gestures <- 6
channels <- 8
root <- "../PCA_EMG_data_for_gestures/"
subjects <- paste0(root, list.files(root), "/")
datarefs <- purrr::flatten_chr(map(subjects, append_file_names))
ordered_gest_nums <- id_gest_num(datarefs)
# set up tensor dimensions
numobs <- length(ordered_gest_nums)
y_dims <- c(numobs, gestures)
x_dims <- c(numobs, 4280, channels) # every matrix is padded to 4280; 8 channels
# create categorical matrix of one-hot gesture labels
# this is giving me an extra col of zeros? thats why -1 is here
y_mat <- to_categorical(ordered_gest_nums)[, -1]
#library(here)
library(dplyr)
#library(here)
library(dplyr)
library(ggplot2)
library(gridExtra)
# same reading part as in the PCA data file
main_directory <- getwd()
setwd(path <- paste0(getwd(),"/","clean_EMG_data_for_gestures-master"))
ind <- list.files()
M <- matrix(NA, nrow=1, ncol=9)
m <- c()
colnames(M) <- c("time", paste0("channel",1:8))
print("\nReading Files...")
prog <- progress_estimated(n = length(ind))
for (i in ind){
paste0(path, "/", i) %>% setwd()
files_i <- list.files() %>% grepl("gesture", .) %>% list.files()[.]
for (j in files_i){
Mnew <- read.table(j, header=TRUE)
M <- rbind(M,Mnew)
mnew <- rep(j,nrow(Mnew))
m <- c(m,mnew)
}
prog$tick()$print()
}
# exclude dummy row
M <- M[-1,]
# excluding time
X <- M[,names(M)!="time"]
# scaling and using PCA
pca1 <- princomp(scale(X))
#library(here)
library(dplyr)
library(here)
library(dplyr)
library(ggplot2)
library(gridExtra)
# same reading part as in the PCA data file
main_directory <- getwd()
setwd(path <- paste0(getwd(),"/","clean_EMG_data_for_gestures-master"))
getwd()
setwd(path <- paste0(getwd(),"/","clean_EMG_data_for_gestures-master"))
################################################################################
##############  WARNING: SCRIPT PARALLELIZED OVER MANY CORES ###################
############## ENSURE YOUR HAVE THE RESOURCES BEFORE RUNNING ###################
################################################################################
# Clean EMG data using RMS filter
library(biosignalEMG)
suppressMessages(library(tidyverse))
library(doMC)
registerDoMC(cores = 2)
# Helper function to clean sEMG data
## Input: txt file_path, out directory path, subfolder to create (e.g. 01, 02, etc)
clean_semg = function(fil, dat_out, sub_f){
dat = read_tsv(fil, col_names = TRUE) # Read txt file
mov  = dat %>% select(class) %>% unlist() %>% factor() # extract class, turn into factor
dat = dat %>% select(-time, -class) %>% # Convert to EMG data type
as.emg(., samplingrate = 1000) # Set sampling rate at 1kHz
ch1 = envelope(dat, method = "RMS",
wsize = 200, channel = 1)$values # Apply RMS to 1st channel
tmp = matrix(NA, length(ch1), 10) # Initialize matrix
tmp[, 1] = seq(2, length(ch1) + 1, by= 1) #Set time vals in ms (i.e. 2 = 200 ms)
tmp[, 2] = ch1 # Add RMS channel 1 vals
# Do same RMS process to rest of channels
for(i in 2:8){
tmp[, i+1] = envelope(dat, method = "RMS", wsize = 200, channel = i)$values
}
# Creat df and add class column
df = tmp %>% as.data.frame() %>%
as.tibble() %>%
setNames(., c("time", dat$data.name, "class")) %>%
mutate(class = mov)
# Create subfolder in out_directory if doesn't exist
dat_out = file.path(dat_out, sub_f)
if (!dir.exists(dat_out)){
dir.create(dat_out)
}
new_filname = basename(fil) %>%
str_replace(., "raw", "clean") # File name change from raw to clean
dat_out = paste0(dat_out,"/", new_filname) # creat file out path
write_tsv(df, dat_out) # write file as txt
}
# End of helper function
# helper for parallel
operate_on_subfolders <- function(direct) {
# direct is directory where operation occurs
files = list.files(direct, full.names = TRUE) # Get 2 files
sub_f = basename(direct) #Get subfolder name to use in helper fcn and keep folder struct
sapply(files, function(x) clean_semg(x, out_path, sub_f)) # Apply helper fcn to both files
}
# End of helper function
################################################################################
# Main script
data_path = "EMG_data_for_gestures-master" # raw data folder
full_path = file.path(getwd(), data_path) # create full path to raw data
out_dir = paste0("clean_", data_path) # Create new clean data folder if non-existent
if (!dir.exists(file.path(getwd(), out_dir))){
dir.create(file.path(getwd(), out_dir))
}
out_path = file.path(getwd(), out_dir)
data_dirs = list.dirs(full_path)[-1] # Get all subfolders in raw data main folder
dirlen = length(data_dirs)
# For each subfolder (i.e. 01, 02, 03, etc)
foreach(d = (1:dirlen)) %dopar% operate_on_subfolders(data_dirs[d])
library(here)
library(dplyr)
library(ggplot2)
library(gridExtra)
getwd()
# same reading part as in the PCA data file
main_directory <- getwd()
setwd(path <- paste0(getwd(),"/","clean_EMG_data_for_gestures-master"))
ind <- list.files()
M <- matrix(NA, nrow=1, ncol=9)
m <- c()
colnames(M) <- c("time", paste0("channel",1:8))
print("\nReading Files...")
prog <- progress_estimated(n = length(ind))
for (i in ind){
paste0(path, "/", i) %>% setwd()
files_i <- list.files() %>% grepl("gesture", .) %>% list.files()[.]
for (j in files_i){
Mnew <- read.table(j, header=TRUE)
M <- rbind(M,Mnew)
mnew <- rep(j,nrow(Mnew))
m <- c(m,mnew)
}
prog$tick()$print()
}
# exclude dummy row
M <- M[-1,]
# excluding time
X <- M[,names(M)!="time"]
# scaling and using PCA
pca1 <- princomp(scale(X))
library(here)
library(dplyr)
library(ggplot2)
library(gridExtra)
getwd()
# same reading part as in the PCA data file
main_directory <- getwd()
setwd(path <- paste0(getwd(),"/","clean_EMG_data_for_gestures-master"))
ind <- list.files()
M <- matrix(NA, nrow=1, ncol=9)
m <- c()
colnames(M) <- c("time", paste0("channel",1:8))
print("\nReading Files...")
prog <- progress_estimated(n = length(ind))
for (i in ind){
paste0(path, "/", i) %>% setwd()
files_i <- list.files() %>% grepl("gesture", .) %>% list.files()[.]
for (j in files_i){
Mnew <- read.table(j, header=TRUE)
M <- rbind(M,Mnew)
mnew <- rep(j,nrow(Mnew))
m <- c(m,mnew)
}
prog$tick()$print()
}
library(here)
library(dplyr)
library(ggplot2)
library(gridExtra)
getwd()
setwd("~/Desktop/UniBook/DUKE Univeristy/STA561 - machine learning/STA561_ML_Project")
library(here)
library(dplyr)
library(ggplot2)
library(gridExtra)
getwd()
# same reading part as in the PCA data file
main_directory <- getwd()
setwd(path <- paste0(getwd(),"/","clean_EMG_data_for_gestures-master"))
ind <- list.files()
M <- matrix(NA, nrow=1, ncol=9)
m <- c()
colnames(M) <- c("time", paste0("channel",1:8))
print("\nReading Files...")
prog <- progress_estimated(n = length(ind))
for (i in ind){
paste0(path, "/", i) %>% setwd()
files_i <- list.files() %>% grepl("gesture", .) %>% list.files()[.]
for (j in files_i){
Mnew <- read.table(j, header=TRUE)
M <- rbind(M,Mnew)
mnew <- rep(j,nrow(Mnew))
m <- c(m,mnew)
}
prog$tick()$print()
}
M
ind <- list.files()
ind
setwd(path <- paste0(main_directory,"/","clean_EMG_data_for_gestures-master"))
ind <- list.files()
ind
M <- matrix(NA, nrow=1, ncol=9)
m <- c()
colnames(M) <- c("time", paste0("channel",1:8))
print("\nReading Files...")
prog <- progress_estimated(n = length(ind))
for (i in ind){
paste0(path, "/", i) %>% setwd()
files_i <- list.files() %>% grepl("gesture", .) %>% list.files()[.]
for (j in files_i){
Mnew <- read.table(j, header=TRUE)
M <- rbind(M,Mnew)
mnew <- rep(j,nrow(Mnew))
m <- c(m,mnew)
}
prog$tick()$print()
}
getwd()
M
M <- matrix(NA, nrow=1, ncol=9)
m <- c()
colnames(M) <- c("time", paste0("channel",1:8))
for (i in ind){
paste0(path, "/", i) %>% setwd()
files_i <- list.files() %>% grepl("gesture", .) %>% list.files()[.]
for (j in files_i){
Mnew <- read.table(j, header=TRUE)
M <- rbind(M,Mnew)
mnew <- rep(j,nrow(Mnew))
m <- c(m,mnew)
}
}
ind
ind <- "02"
paste0(path, "/", i) %>% setwd()
files_i <- list.files() %>% grepl("gesture", .) %>% list.files()[.]
for (j in files_i){
Mnew <- read.table(j, header=TRUE)
M <- rbind(M,Mnew)
mnew <- rep(j,nrow(Mnew))
m <- c(m,mnew)
}
M
files_i
list.files() %>% grepl("gesture", .) %>% list.files()[.]
list.files()
################################################################################
##############     Seperate gestures into their own files    ###################
################################################################################
################################################################################
##############  WARNING: SCRIPT PARALLELIZED OVER MANY CORES ###################
############## ENSURE YOUR HAVE THE RESOURCES BEFORE RUNNING ###################
################################################################################
library(stringr)
library(tidyverse)
library(doMC)
registerDoMC(cores = 3)
############################### Helper Functions ###############################
parse_gest_file <- function(f) {
df <- read.table(f, header = TRUE) # read txt file
trl <- str_extract(f, "\\d{1}_clean") # trial number
subjnum <- str_extract(f, "\\d{2}") # id subject number for filepath
for (i in 1:6) {
gestdf <- df %>% filter(class == i) %>% select(-class)
# define file path for each observation of gesture in file
# filename key: ./[dir]/[subj num {01,36}]/gesture_[gest num (1-6)]_[attempt num {1,2}]_[trial num {1,2}]
# there are 2 trials (large txt file) per subject; 2 attempts per gesture per trial
fp1 <- paste0(rootname, subjnum, "/", subjnum, "_gesture_", i, "_1_", trl, ".txt")
fp2 <- paste0(rootname, subjnum, "/", subjnum, "_gesture_", i, "_2_", trl, ".txt")
# find split point between first and second observation of gesture i
t <- length(gestdf$time)
for (j in 2:t) {
# if time j differs from j - 1 by 1K miliseconds we have split
if (gestdf$time[j] - gestdf$time[j - 1] > 1000) {
write.table(gestdf[1:(j-1), ], fp1)
write.table(gestdf[j:t, ], fp2)
}
}
}
}
remove_main_data_files <- function(subjdir) {
# delete non-parsed data files after parsing gestures
files <- list.files(subjdir)
full_dat_files <- files[str_detect(files, "\\d_clean_data_")]
full_file_paths <- paste0(subjdir, "/", full_dat_files)
if (file.exists(full_file_paths)) {
file.remove(full_file_paths)
}
}
################################################################################
# root file directory for data files
rootname <- "./clean_EMG_data_for_gestures-master/"
subjects <- paste0(rootname, list.files(rootname))
datafiles1 <- c()
datafiles2 <- c()
# indentify both files for each subject
for (s in subjects) {
datafiles1 <- c(datafiles1, paste0(s, "/", list.files(s)[1]))
datafiles2 <- c(datafiles2, paste0(s, "/", list.files(s)[2]))
}
# data frame of data files
files <- data_frame(
subjects = list.files(rootname),
df1 = datafiles1,
df2 = datafiles2
) %>% gather(subj, datafiles, -subjects) %>% select(-subj)
n <- nrow(files)
# seperate gestures in each
foreach(i = (1:n)) %dopar% parse_gest_file(files$datafiles[i])
for (s in subjects) {
remove_main_data_files(s)
}
setwd("~/Desktop/UniBook/DUKE Univeristy/STA561 - machine learning/STA561_ML_Project")
################################################################################
##############     Seperate gestures into their own files    ###################
################################################################################
################################################################################
##############  WARNING: SCRIPT PARALLELIZED OVER MANY CORES ###################
############## ENSURE YOUR HAVE THE RESOURCES BEFORE RUNNING ###################
################################################################################
library(stringr)
library(tidyverse)
library(doMC)
registerDoMC(cores = 3)
############################### Helper Functions ###############################
parse_gest_file <- function(f) {
df <- read.table(f, header = TRUE) # read txt file
trl <- str_extract(f, "\\d{1}_clean") # trial number
subjnum <- str_extract(f, "\\d{2}") # id subject number for filepath
for (i in 1:6) {
gestdf <- df %>% filter(class == i) %>% select(-class)
# define file path for each observation of gesture in file
# filename key: ./[dir]/[subj num {01,36}]/gesture_[gest num (1-6)]_[attempt num {1,2}]_[trial num {1,2}]
# there are 2 trials (large txt file) per subject; 2 attempts per gesture per trial
fp1 <- paste0(rootname, subjnum, "/", subjnum, "_gesture_", i, "_1_", trl, ".txt")
fp2 <- paste0(rootname, subjnum, "/", subjnum, "_gesture_", i, "_2_", trl, ".txt")
# find split point between first and second observation of gesture i
t <- length(gestdf$time)
for (j in 2:t) {
# if time j differs from j - 1 by 1K miliseconds we have split
if (gestdf$time[j] - gestdf$time[j - 1] > 1000) {
write.table(gestdf[1:(j-1), ], fp1)
write.table(gestdf[j:t, ], fp2)
}
}
}
}
remove_main_data_files <- function(subjdir) {
# delete non-parsed data files after parsing gestures
files <- list.files(subjdir)
full_dat_files <- files[str_detect(files, "\\d_clean_data_")]
full_file_paths <- paste0(subjdir, "/", full_dat_files)
if (file.exists(full_file_paths)) {
file.remove(full_file_paths)
}
}
################################################################################
# root file directory for data files
rootname <- "./clean_EMG_data_for_gestures-master/"
subjects <- paste0(rootname, list.files(rootname))
datafiles1 <- c()
datafiles2 <- c()
# indentify both files for each subject
for (s in subjects) {
datafiles1 <- c(datafiles1, paste0(s, "/", list.files(s)[1]))
datafiles2 <- c(datafiles2, paste0(s, "/", list.files(s)[2]))
}
# data frame of data files
files <- data_frame(
subjects = list.files(rootname),
df1 = datafiles1,
df2 = datafiles2
) %>% gather(subj, datafiles, -subjects) %>% select(-subj)
n <- nrow(files)
# seperate gestures in each
foreach(i = (1:n)) %dopar% parse_gest_file(files$datafiles[i])
for (s in subjects) {
remove_main_data_files(s)
}
getwd()
library(here)
library(dplyr)
library(ggplot2)
library(gridExtra)
# same reading part as in the PCA data file
main_directory <- getwd()
setwd(path <- paste0(main_directory,"/","clean_EMG_data_for_gestures-master"))
ind <- list.files()
M <- matrix(NA, nrow=1, ncol=9)
m <- c()
colnames(M) <- c("time", paste0("channel",1:8))
print("\nReading Files...")
prog <- progress_estimated(n = length(ind))
for (i in ind){
paste0(path, "/", i) %>% setwd()
files_i <- list.files() %>% grepl("gesture", .) %>% list.files()[.]
for (j in files_i){
Mnew <- read.table(j, header=TRUE)
M <- rbind(M,Mnew)
mnew <- rep(j,nrow(Mnew))
m <- c(m,mnew)
}
prog$tick()$print()
}
# exclude dummy row
M <- M[-1,]
# excluding time
X <- M[,names(M)!="time"]
# scaling and using PCA
pca1 <- princomp(scale(X))
Plot_df <- data.frame(prop_var=pca1$sdev^2/sum(pca1$sdev^2), comp=names(pca1$sdev),
cumulative=cumsum(pca1$sdev^2)/sum(pca1$sdev^2))
p1 <- ggplot(data=Plot_df, aes(x=comp, y=prop_var)) +
geom_bar(stat="identity")+
ylab("proportional variance")+
ggtitle("Screeplot")+
theme(plot.title = element_text(hjust = 0.5), axis.title.x=element_blank(),
axis.text.x = element_text(angle = 60, hjust = 1))
p2 <- ggplot(data=Plot_df, aes(x=comp, y=cumulative, group=1)) +
geom_line()+
geom_point()+
ylab("cumulative proportional variance")+
ggtitle("Cumulative variance plot")+
theme(plot.title = element_text(hjust = 0.5), axis.title.x=element_blank(),
axis.text.x = element_text(angle = 60, hjust = 1))
grid.arrange(p1, p2, ncol=2)
pca1$sdev^2/sum(pca1$sdev^2)
pca1$sdev^2/sum(pca1$sdev^2)/(1/8)
pca1$sdev^2/sum(pca1$sdev^2)
library(stargazer)
Plot_df
t(Plot_df)
stargazer(t(Plot_df), summary=F)
Plot_df
stargazer(data.frame(pv=Plot_df$prop_var, cum=Plot_df$cumulative), summary=F)
data.frame(pv=Plot_df$prop_var, cum=Plot_df$cumulative)
t(data.frame(pv=Plot_df$prop_var, cum=Plot_df$cumulative))
t(matrix(pv=Plot_df$prop_var, cum=Plot_df$cumulative))
rbind(Plot_df$prop_var, cum=Plot_df$cumulative)
t((Plot_df$prop_var, cum=Plot_df$cumulative))
t(data.frame(Plot_df$prop_var, cum=Plot_df$cumulative))
t(data.frame(Plot_df$prop_var, Plot_df$cumulative))
Tab_df <- t(data.frame(Plot_df$prop_var, Plot_df$cumulative))
names(Tab_df)
names(Tab_df) <- paste("Comp.",1:8)
Tab_df
Tab_df <- t(data.frame(Plot_df$prop_var, Plot_df$cumulative))
colnames(Tab_df) <- paste("Comp.",1:8)
Tab_df
rownames(Tab_df)
rownames(Tab_df) <- c("proportion of explained variance", "cummulative explained variance")
stargazer(Tab_df, summary = F)
stargazer(Tab_df, summary = F, column.sep.width = "2pt")
Tab_df <- t(data.frame(Plot_df$prop_var, Plot_df$cumulative))
colnames(Tab_df) <- paste("Comp.",1:8)
rownames(Tab_df) <- c("proportion of \\ explained variance", "cummulative explained \\variance")
stargazer(Tab_df, summary = F, column.sep.width = "2pt", digits=3)
stargazer(Tab_df, summary = F, column.sep.width = "2pt", digits=3, align=TRUE, column.separate = 1)
stargazer(Tab_df, summary = F, column.sep.width = "2pt", digits=3, align=TRUE)
stargazer(Tab_df, summary = F, column.sep.width = "2pt", digits=3)
Tab_df <- t(data.frame(Plot_df$prop_var, Plot_df$cumulative, Plot_df$prop_var/1/8))
colnames(Tab_df) <- paste("Comp.",1:8)
rownames(Tab_df) <- c("proportion of \\ explained variance", "cummulative explained \\variance", "own measure")
stargazer(Tab_df, summary = F, column.sep.width = "2pt", digits=3)
Tab_df <- t(data.frame(Plot_df$prop_var, Plot_df$cumulative, Plot_df$prop_var/(1/8)))
colnames(Tab_df) <- paste("Comp.",1:8)
rownames(Tab_df) <- c("proportion of \\ explained variance", "cummulative explained \\variance", "own measure")
stargazer(Tab_df, summary = F, column.sep.width = "0pt", digits=3)
Tab_df <- t(data.frame(Plot_df$prop_var, Plot_df$cumulative, (1/8)/Plot_df$cumulative))
colnames(Tab_df) <- paste("Comp.",1:8)
rownames(Tab_df) <- c("proportion of \\ explained variance", "cummulative explained \\variance", "own measure")
stargazer(Tab_df, summary = F, column.sep.width = "0pt", digits=3)
diff(Plot_df$prop_var)
Plot_df$prop_var
Plot_df$prop_var[2]-Plot_df$prop_var[1]
temp <-diff(Plot_df$prop_var, diff=-1)
diff(Plot_df$prop_var, diff=2)
-Plot_df$prop_var[2]+Plot_df$prop_var[1]
temp <-diff(rev(Plot_df$prop_var))
temp
temp <- rev(diff(rev(Plot_df$prop_var)))
temp
-Plot_df$prop_var[2]+Plot_df$prop_var[1]
-Plot_df$prop_var[3]+Plot_df$prop_var[2]
plot(temp)
8/Plot_df$cumulative
Tab_df
Tab_df <- t(data.frame(Plot_df$prop_var, Plot_df$cumulative, (1/8)/Plot_df$prop_var))
colnames(Tab_df) <- paste("Comp.",1:8)
rownames(Tab_df) <- c("proportion of \\ explained variance", "cummulative explained \\variance", "own measure")
stargazer(Tab_df, summary = F, column.sep.width = "0pt", digits=3)
Tab_df <- t(data.frame(Plot_df$prop_var, Plot_df$cumulative, Plot_df$prop_var/(1/8)))
colnames(Tab_df) <- paste("Comp.",1:8)
rownames(Tab_df) <- c("proportion of \\ explained variance", "cummulative explained \\variance", "own measure")
stargazer(Tab_df, summary = F, column.sep.width = "0pt", digits=3)
